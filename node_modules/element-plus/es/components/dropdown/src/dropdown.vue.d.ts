import type { PropType } from 'vue';
import { Effect, Placement } from 'element-plus/es/popper';
import type { ComponentPublicInstance } from 'vue';
import type { TriggerType } from 'element-plus/es/hooks/use-popper/use-target-events';
import type { ButtonType } from 'element-plus/es/button/src/types';
declare const _default: import("vue").DefineComponent<{
    trigger: {
        type: PropType<"contextmenu" | TriggerType>;
        default: string;
    };
    type: PropType<ButtonType>;
    size: {
        type: StringConstructor;
        default: string;
    };
    splitButton: BooleanConstructor;
    hideOnClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    placement: {
        type: PropType<Placement>;
        default: string;
    };
    showTimeout: {
        type: NumberConstructor;
        default: number;
    };
    hideTimeout: {
        type: NumberConstructor;
        default: number;
    };
    tabindex: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
    effect: {
        type: PropType<Effect>;
        default: Effect;
    };
    maxHeight: {
        type: (NumberConstructor | StringConstructor)[];
        default: string;
    };
}, {
    visible: import("vue").Ref<boolean>;
    scrollbar: any;
    wrapStyle: import("vue").ComputedRef<string>;
    dropdownSize: import("vue").ComputedRef<any>;
    handlerMainButtonClick: (event: any) => void;
    triggerVnode: import("vue").Ref<ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "visible-change" | "command")[], "click" | "visible-change" | "command", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    trigger?: unknown;
    type?: unknown;
    size?: unknown;
    splitButton?: unknown;
    hideOnClick?: unknown;
    placement?: unknown;
    showTimeout?: unknown;
    hideTimeout?: unknown;
    tabindex?: unknown;
    effect?: unknown;
    maxHeight?: unknown;
} & {
    effect: Effect;
    size: string;
    placement: Placement;
    trigger: "contextmenu" | TriggerType;
    maxHeight: string | number;
    tabindex: string | number;
    splitButton: boolean;
    hideOnClick: boolean;
    showTimeout: number;
    hideTimeout: number;
} & {
    type?: ButtonType;
}> & {
    onClick?: (...args: any[]) => any;
    "onVisible-change"?: (...args: any[]) => any;
    onCommand?: (...args: any[]) => any;
}, {
    effect: Effect;
    size: string;
    placement: Placement;
    trigger: "contextmenu" | TriggerType;
    maxHeight: string | number;
    tabindex: string | number;
    splitButton: boolean;
    hideOnClick: boolean;
    showTimeout: number;
    hideTimeout: number;
}>;
export default _default;
