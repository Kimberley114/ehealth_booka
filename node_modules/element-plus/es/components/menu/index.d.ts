import MenuItem from './src/menuItem.vue';
import MenuItemGroup from './src/menuItemGroup.vue';
import SubMenu from './src/submenu.vue';
import type { SFCWithInstall } from 'element-plus/es/utils/types';
declare const _Menu: SFCWithInstall<import("vue").DefineComponent<{
    mode: {
        type: StringConstructor;
        default: string;
    };
    defaultActive: {
        type: StringConstructor;
        default: string;
    };
    defaultOpeneds: ArrayConstructor;
    uniqueOpened: BooleanConstructor;
    router: BooleanConstructor;
    menuTrigger: {
        type: StringConstructor;
        default: string;
    };
    collapse: BooleanConstructor;
    backgroundColor: {
        type: StringConstructor;
    };
    textColor: {
        type: StringConstructor;
    };
    activeTextColor: {
        type: StringConstructor;
    };
    collapseTransition: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    hoverBackground: import("vue").ComputedRef<string>;
    isMenuPopup: import("vue").ComputedRef<boolean>;
    menu: any;
    filteredSlot: import("vue").Ref<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[]>;
    props: import("./src/menu.type").IMenuProps;
    open: (index: any) => void;
    close: (index: any) => void;
    handleResize: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("close" | "select" | "open")[], "close" | "select" | "open", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    mode?: unknown;
    defaultActive?: unknown;
    defaultOpeneds?: unknown;
    uniqueOpened?: unknown;
    router?: unknown;
    menuTrigger?: unknown;
    collapse?: unknown;
    backgroundColor?: unknown;
    textColor?: unknown;
    activeTextColor?: unknown;
    collapseTransition?: unknown;
} & {
    mode: string;
    collapse: boolean;
    defaultActive: string;
    uniqueOpened: boolean;
    router: boolean;
    menuTrigger: string;
    collapseTransition: boolean;
} & {
    backgroundColor?: string;
    textColor?: string;
    defaultOpeneds?: unknown[];
    activeTextColor?: string;
}> & {
    onClose?: (...args: any[]) => any;
    onSelect?: (...args: any[]) => any;
    onOpen?: (...args: any[]) => any;
}, {
    mode: string;
    collapse: boolean;
    defaultActive: string;
    uniqueOpened: boolean;
    router: boolean;
    menuTrigger: string;
    collapseTransition: boolean;
}>> & {
    MenuItem: typeof MenuItem;
    MenuItemGroup: typeof MenuItemGroup;
    SubMenu: typeof SubMenu;
};
export default _Menu;
export declare const ElMenu: SFCWithInstall<import("vue").DefineComponent<{
    mode: {
        type: StringConstructor;
        default: string;
    };
    defaultActive: {
        type: StringConstructor;
        default: string;
    };
    defaultOpeneds: ArrayConstructor;
    uniqueOpened: BooleanConstructor;
    router: BooleanConstructor;
    menuTrigger: {
        type: StringConstructor;
        default: string;
    };
    collapse: BooleanConstructor;
    backgroundColor: {
        type: StringConstructor;
    };
    textColor: {
        type: StringConstructor;
    };
    activeTextColor: {
        type: StringConstructor;
    };
    collapseTransition: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    hoverBackground: import("vue").ComputedRef<string>;
    isMenuPopup: import("vue").ComputedRef<boolean>;
    menu: any;
    filteredSlot: import("vue").Ref<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[]>;
    props: import("./src/menu.type").IMenuProps;
    open: (index: any) => void;
    close: (index: any) => void;
    handleResize: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("close" | "select" | "open")[], "close" | "select" | "open", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    mode?: unknown;
    defaultActive?: unknown;
    defaultOpeneds?: unknown;
    uniqueOpened?: unknown;
    router?: unknown;
    menuTrigger?: unknown;
    collapse?: unknown;
    backgroundColor?: unknown;
    textColor?: unknown;
    activeTextColor?: unknown;
    collapseTransition?: unknown;
} & {
    mode: string;
    collapse: boolean;
    defaultActive: string;
    uniqueOpened: boolean;
    router: boolean;
    menuTrigger: string;
    collapseTransition: boolean;
} & {
    backgroundColor?: string;
    textColor?: string;
    defaultOpeneds?: unknown[];
    activeTextColor?: string;
}> & {
    onClose?: (...args: any[]) => any;
    onSelect?: (...args: any[]) => any;
    onOpen?: (...args: any[]) => any;
}, {
    mode: string;
    collapse: boolean;
    defaultActive: string;
    uniqueOpened: boolean;
    router: boolean;
    menuTrigger: string;
    collapseTransition: boolean;
}>> & {
    MenuItem: typeof MenuItem;
    MenuItemGroup: typeof MenuItemGroup;
    SubMenu: typeof SubMenu;
};
export declare const ElMenuItem: import("vue").DefineComponent<{
    index: {
        type: StringConstructor;
        default: any;
    };
    route: (StringConstructor | ObjectConstructor)[];
    disabled: BooleanConstructor;
}, {
    Effect: typeof import("..").Effect;
    parentMenu: import("vue").ComputedRef<import("vue").ComponentInternalInstance>;
    rootMenu: import("./src/menu.type").RootMenuProvider;
    slots: Readonly<{
        [name: string]: import("vue").Slot;
    }>;
    paddingStyle: import("vue").ComputedRef<{
        paddingLeft?: undefined;
    } | {
        paddingLeft: string;
    }>;
    itemStyle: import("vue").ComputedRef<{
        color: string;
        borderBottomColor: string;
    }>;
    backgroundColor: import("vue").ComputedRef<string>;
    active: import("vue").ComputedRef<boolean>;
    handleClick: () => void;
    onMouseEnter: () => void;
    onMouseLeave: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    index?: unknown;
    route?: unknown;
    disabled?: unknown;
} & {
    disabled: boolean;
} & {
    index?: string;
    route?: unknown;
}> & {
    onClick?: (...args: any[]) => any;
}, {
    disabled: boolean;
    index: string;
}>;
export declare const ElMenuItemGroup: import("vue").DefineComponent<{
    title: {
        type: StringConstructor;
    };
}, {
    data: {
        paddingLeft: number;
    };
    levelPadding: import("vue").ComputedRef<number>;
    props: import("./src/menu.type").IMenuGroupProps;
    slots: Readonly<{
        [name: string]: import("vue").Slot;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    title?: unknown;
} & {} & {
    title?: string;
}> & {}, {}>;
export declare const ElSubMenu: import("vue").DefineComponent<{
    index: {
        type: StringConstructor;
        required: true;
    };
    showTimeout: {
        type: NumberConstructor;
        default: number;
    };
    hideTimeout: {
        type: NumberConstructor;
        default: number;
    };
    popperClass: StringConstructor;
    disabled: BooleanConstructor;
    popperAppendToBody: {
        type: BooleanConstructor;
        default: any;
    };
}, {
    data: {
        popperJS: any;
        timeout: any;
        items: {};
        submenus: {};
        currentPlacement: string;
        mouseInChild: boolean;
        opened: boolean;
    };
    props: import("./src/menu.type").ISubMenuProps;
    mode: import("vue").ComputedRef<string>;
    active: import("vue").ComputedRef<boolean>;
    isMenuPopup: import("vue").Ref<boolean>;
    opened: import("vue").ComputedRef<boolean>;
    paddingStyle: import("vue").ComputedRef<{
        paddingLeft?: undefined;
    } | {
        paddingLeft: string;
    }>;
    titleStyle: import("vue").ComputedRef<{
        color: string;
        borderBottomColor?: undefined;
    } | {
        borderBottomColor: string;
        color: string;
    }>;
    backgroundColor: import("vue").ComputedRef<string>;
    rootProps: Readonly<Partial<import("./src/menu.type").RootMenuProps>>;
    menuTransitionName: import("vue").ComputedRef<"el-zoom-in-top" | "el-zoom-in-left">;
    fallbackPlacements: import("vue").ComputedRef<string[]>;
    submenuTitleIcon: import("vue").ComputedRef<"el-icon-arrow-down" | "el-icon-arrow-right">;
    showSubmenuTitleIcon: import("vue").ComputedRef<boolean>;
    appendToBody: import("vue").ComputedRef<boolean>;
    handleClick: () => void;
    handleMouseenter: (event: any, showTimeout?: number) => void;
    handleMouseleave: (deepDispatch?: boolean) => void;
    handleTitleMouseenter: () => void;
    handleTitleMouseleave: () => void;
    addItem: (item: any) => void;
    removeItem: (item: any) => void;
    addSubMenu: (item: any) => void;
    removeSubMenu: (item: any) => void;
    popperVnode: any;
    verticalTitleRef: import("vue").Ref<HTMLElement>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    index?: unknown;
    showTimeout?: unknown;
    hideTimeout?: unknown;
    popperClass?: unknown;
    disabled?: unknown;
    popperAppendToBody?: unknown;
} & {
    disabled: boolean;
    index: string;
    showTimeout: number;
    hideTimeout: number;
} & {
    popperClass?: string;
    popperAppendToBody?: boolean;
}> & {}, {
    disabled: boolean;
    popperAppendToBody: boolean;
    showTimeout: number;
    hideTimeout: number;
}>;
export * from './src/menu.type';
