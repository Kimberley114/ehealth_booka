import type { SFCWithInstall } from 'element-plus/es/utils/types';
import CollapseItem from './src/collapse-item.vue';
declare const _Collapse: SFCWithInstall<import("vue").DefineComponent<{
    accordion: BooleanConstructor;
    modelValue: {
        type: import("vue").PropType<string | number | (string | number)[]>;
        default: () => any[];
    };
}, {
    activeNames: import("vue").Ref<any[]>;
    setActiveNames: (_activeNames: any) => void;
    handleItemClick: (name: any) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:modelValue")[], "change" | "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    accordion?: unknown;
    modelValue?: unknown;
} & {
    modelValue: string | number | (string | number)[];
    accordion: boolean;
} & {}> & {
    onChange?: (...args: any[]) => any;
    "onUpdate:modelValue"?: (...args: any[]) => any;
}, {
    modelValue: string | number | (string | number)[];
    accordion: boolean;
}>> & {
    CollapseItem: typeof CollapseItem;
};
export default _Collapse;
export declare const ElCollapse: SFCWithInstall<import("vue").DefineComponent<{
    accordion: BooleanConstructor;
    modelValue: {
        type: import("vue").PropType<string | number | (string | number)[]>;
        default: () => any[];
    };
}, {
    activeNames: import("vue").Ref<any[]>;
    setActiveNames: (_activeNames: any) => void;
    handleItemClick: (name: any) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:modelValue")[], "change" | "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    accordion?: unknown;
    modelValue?: unknown;
} & {
    modelValue: string | number | (string | number)[];
    accordion: boolean;
} & {}> & {
    onChange?: (...args: any[]) => any;
    "onUpdate:modelValue"?: (...args: any[]) => any;
}, {
    modelValue: string | number | (string | number)[];
    accordion: boolean;
}>> & {
    CollapseItem: typeof CollapseItem;
};
export declare const ElCollapseItem: import("vue").DefineComponent<{
    title: {
        type: StringConstructor;
        default: string;
    };
    name: {
        type: import("vue").PropType<string | number>;
        default: () => number;
    };
    disabled: BooleanConstructor;
}, {
    isActive: import("vue").ComputedRef<boolean>;
    contentWrapStyle: import("vue").Ref<{
        height: string;
        display: string;
    }>;
    contentHeight: import("vue").Ref<number>;
    focusing: import("vue").Ref<boolean>;
    isClick: import("vue").Ref<boolean>;
    id: import("vue").Ref<number>;
    handleFocus: () => void;
    handleHeaderClick: () => void;
    handleEnterClick: () => void;
    collapse: import("./src/collapse").CollapseProvider;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    title?: unknown;
    name?: unknown;
    disabled?: unknown;
} & {
    title: string;
    name: string | number;
    disabled: boolean;
} & {}> & {}, {
    title: string;
    name: string | number;
    disabled: boolean;
}>;
