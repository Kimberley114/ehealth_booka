import type { SFCWithInstall } from 'element-plus/es/utils/types';
declare const _Tag: SFCWithInstall<import("vue").DefineComponent<{
    closable: BooleanConstructor;
    type: {
        type: import("vue").PropType<"" | "success" | "info" | "warning" | "danger">;
        default: string;
    };
    hit: BooleanConstructor;
    disableTransitions: BooleanConstructor;
    color: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: import("vue").PropType<import("element-plus/es/utils/types").ComponentSize>;
        validator: (val: string) => boolean;
    };
    effect: {
        type: StringConstructor;
        default: string;
        validator: (val: string) => boolean;
    };
}, {
    tagSize: import("vue").ComputedRef<any>;
    classes: import("vue").ComputedRef<string[]>;
    handleClose: (event: any) => void;
    handleClick: (event: any) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "close")[], "click" | "close", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    closable?: unknown;
    type?: unknown;
    hit?: unknown;
    disableTransitions?: unknown;
    color?: unknown;
    size?: unknown;
    effect?: unknown;
} & {
    type: "" | "success" | "info" | "warning" | "danger";
    closable: boolean;
    effect: string;
    color: string;
    hit: boolean;
    disableTransitions: boolean;
} & {
    size?: import("element-plus/es/utils/types").ComponentSize;
}> & {
    onClose?: (...args: any[]) => any;
    onClick?: (...args: any[]) => any;
}, {
    type: "" | "success" | "info" | "warning" | "danger";
    closable: boolean;
    effect: string;
    color: string;
    hit: boolean;
    disableTransitions: boolean;
}>>;
export default _Tag;
export declare const ElTag: SFCWithInstall<import("vue").DefineComponent<{
    closable: BooleanConstructor;
    type: {
        type: import("vue").PropType<"" | "success" | "info" | "warning" | "danger">;
        default: string;
    };
    hit: BooleanConstructor;
    disableTransitions: BooleanConstructor;
    color: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: import("vue").PropType<import("element-plus/es/utils/types").ComponentSize>;
        validator: (val: string) => boolean;
    };
    effect: {
        type: StringConstructor;
        default: string;
        validator: (val: string) => boolean;
    };
}, {
    tagSize: import("vue").ComputedRef<any>;
    classes: import("vue").ComputedRef<string[]>;
    handleClose: (event: any) => void;
    handleClick: (event: any) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "close")[], "click" | "close", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    closable?: unknown;
    type?: unknown;
    hit?: unknown;
    disableTransitions?: unknown;
    color?: unknown;
    size?: unknown;
    effect?: unknown;
} & {
    type: "" | "success" | "info" | "warning" | "danger";
    closable: boolean;
    effect: string;
    color: string;
    hit: boolean;
    disableTransitions: boolean;
} & {
    size?: import("element-plus/es/utils/types").ComponentSize;
}> & {
    onClose?: (...args: any[]) => any;
    onClick?: (...args: any[]) => any;
}, {
    type: "" | "success" | "info" | "warning" | "danger";
    closable: boolean;
    effect: string;
    color: string;
    hit: boolean;
    disableTransitions: boolean;
}>>;
