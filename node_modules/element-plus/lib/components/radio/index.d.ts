import RadioButton from './src/radio-button.vue';
import RadioGroup from './src/radio-group.vue';
import type { SFCWithInstall } from 'element-plus/es/utils/types';
declare const _Radio: SFCWithInstall<import("vue").DefineComponent<{
    modelValue: {
        type: (NumberConstructor | StringConstructor | BooleanConstructor)[];
        default: string;
    };
    label: {
        type: (NumberConstructor | StringConstructor | BooleanConstructor)[];
        default: string;
    };
    disabled: BooleanConstructor;
    name: {
        type: StringConstructor;
        default: string;
    };
    border: BooleanConstructor;
    size: {
        type: import("vue").PropType<import("element-plus/es/utils/types").ComponentSize>;
        validator: (val: string) => boolean;
    };
}, {
    focus: import("vue").Ref<boolean>;
    isGroup: import("vue").ComputedRef<boolean>;
    isDisabled: import("vue").ComputedRef<boolean>;
    model: import("vue").WritableComputedRef<string | number | boolean>;
    tabIndex: import("vue").ComputedRef<0 | -1>;
    radioSize: import("vue").ComputedRef<any>;
    handleChange: () => void;
    radioRef: import("vue").Ref<HTMLInputElement>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:modelValue")[], "change" | "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    label?: unknown;
    disabled?: unknown;
    name?: unknown;
    border?: unknown;
    size?: unknown;
} & {
    label: string | number | boolean;
    name: string;
    disabled: boolean;
    border: boolean;
    modelValue: string | number | boolean;
} & {
    size?: import("element-plus/es/utils/types").ComponentSize;
}> & {
    onChange?: (...args: any[]) => any;
    "onUpdate:modelValue"?: (...args: any[]) => any;
}, {
    label: string | number | boolean;
    name: string;
    disabled: boolean;
    border: boolean;
    modelValue: string | number | boolean;
}>> & {
    RadioButton: typeof RadioButton;
    RadioGroup: typeof RadioGroup;
};
export default _Radio;
export declare const ElRadio: SFCWithInstall<import("vue").DefineComponent<{
    modelValue: {
        type: (NumberConstructor | StringConstructor | BooleanConstructor)[];
        default: string;
    };
    label: {
        type: (NumberConstructor | StringConstructor | BooleanConstructor)[];
        default: string;
    };
    disabled: BooleanConstructor;
    name: {
        type: StringConstructor;
        default: string;
    };
    border: BooleanConstructor;
    size: {
        type: import("vue").PropType<import("element-plus/es/utils/types").ComponentSize>;
        validator: (val: string) => boolean;
    };
}, {
    focus: import("vue").Ref<boolean>;
    isGroup: import("vue").ComputedRef<boolean>;
    isDisabled: import("vue").ComputedRef<boolean>;
    model: import("vue").WritableComputedRef<string | number | boolean>;
    tabIndex: import("vue").ComputedRef<0 | -1>;
    radioSize: import("vue").ComputedRef<any>;
    handleChange: () => void;
    radioRef: import("vue").Ref<HTMLInputElement>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:modelValue")[], "change" | "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    label?: unknown;
    disabled?: unknown;
    name?: unknown;
    border?: unknown;
    size?: unknown;
} & {
    label: string | number | boolean;
    name: string;
    disabled: boolean;
    border: boolean;
    modelValue: string | number | boolean;
} & {
    size?: import("element-plus/es/utils/types").ComponentSize;
}> & {
    onChange?: (...args: any[]) => any;
    "onUpdate:modelValue"?: (...args: any[]) => any;
}, {
    label: string | number | boolean;
    name: string;
    disabled: boolean;
    border: boolean;
    modelValue: string | number | boolean;
}>> & {
    RadioButton: typeof RadioButton;
    RadioGroup: typeof RadioGroup;
};
export declare const ElRadioGroup: import("vue").DefineComponent<{
    modelValue: {
        type: (NumberConstructor | StringConstructor | BooleanConstructor)[];
        default: string;
    };
    size: {
        type: import("vue").PropType<import("element-plus/es/utils/types").ComponentSize>;
        validator: (val: string) => boolean;
    };
    fill: {
        type: StringConstructor;
        default: string;
    };
    textColor: {
        type: StringConstructor;
        default: string;
    };
    disabled: BooleanConstructor;
}, {
    handleKeydown: (e: any) => void;
    radioGroupSize: import("vue").ComputedRef<import("element-plus/es/utils/types").ComponentSize>;
    radioGroup: any;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:modelValue")[], "change" | "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    size?: unknown;
    fill?: unknown;
    textColor?: unknown;
    disabled?: unknown;
} & {
    fill: string;
    disabled: boolean;
    modelValue: string | number | boolean;
    textColor: string;
} & {
    size?: import("element-plus/es/utils/types").ComponentSize;
}> & {
    onChange?: (...args: any[]) => any;
    "onUpdate:modelValue"?: (...args: any[]) => any;
}, {
    fill: string;
    disabled: boolean;
    modelValue: string | number | boolean;
    textColor: string;
}>;
export declare const ElRadioButton: import("vue").DefineComponent<{
    label: {
        type: (NumberConstructor | StringConstructor | BooleanConstructor)[];
        default: string;
    };
    disabled: BooleanConstructor;
    name: {
        type: StringConstructor;
        default: string;
    };
}, {
    isGroup: import("vue").ComputedRef<boolean>;
    size: import("vue").ComputedRef<any>;
    isDisabled: import("vue").ComputedRef<boolean>;
    tabIndex: import("vue").ComputedRef<0 | -1>;
    value: import("vue").WritableComputedRef<string | number | boolean>;
    focus: import("vue").Ref<boolean>;
    activeStyle: import("vue").ComputedRef<{
        backgroundColor: string;
        borderColor: string;
        boxShadow: string;
        color: string;
    }>;
    radioRef: import("vue").Ref<HTMLInputElement>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    label?: unknown;
    disabled?: unknown;
    name?: unknown;
} & {
    label: string | number | boolean;
    name: string;
    disabled: boolean;
} & {}> & {}, {
    label: string | number | boolean;
    name: string;
    disabled: boolean;
}>;
export * from './src/token';
