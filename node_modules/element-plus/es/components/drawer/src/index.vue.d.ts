import type { PropType } from 'vue';
declare type DrawerDirection = 'ltr' | 'rtl' | 'ttb' | 'btt';
declare const _default: import("vue").DefineComponent<{
    direction: {
        type: PropType<DrawerDirection>;
        default: string;
        validator: (val: DrawerDirection) => boolean;
    };
    size: {
        type: (NumberConstructor | StringConstructor)[];
        default: string;
    };
    withHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    modalFade: {
        type: BooleanConstructor;
        default: boolean;
    };
    appendToBody: {
        type: BooleanConstructor;
        default: boolean;
    };
    beforeClose: {
        type: PropType<(...args: any[]) => unknown>;
    };
    destroyOnClose: {
        type: BooleanConstructor;
        default: boolean;
    };
    center: {
        type: BooleanConstructor;
        default: boolean;
    };
    customClass: {
        type: StringConstructor;
        default: string;
    };
    closeOnClickModal: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnPressEscape: {
        type: BooleanConstructor;
        default: boolean;
    };
    fullscreen: {
        type: BooleanConstructor;
        default: boolean;
    };
    lockScroll: {
        type: BooleanConstructor;
        default: boolean;
    };
    modal: {
        type: BooleanConstructor;
        default: boolean;
    };
    showClose: {
        type: BooleanConstructor;
        default: boolean;
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    openDelay: {
        type: NumberConstructor;
        default: number;
    };
    closeDelay: {
        type: NumberConstructor;
        default: number;
    };
    top: {
        type: StringConstructor;
        default: string;
    };
    modelValue: {
        type: BooleanConstructor;
        required: boolean;
    };
    modalClass: StringConstructor;
    width: {
        type: (NumberConstructor | StringConstructor)[];
        default: string;
        validator: (val: string | number) => boolean;
    };
    zIndex: {
        type: NumberConstructor;
    };
}, {
    drawerRef: import("vue").Ref<HTMLElement>;
    isHorizontal: import("vue").ComputedRef<boolean>;
    drawerSize: import("vue").ComputedRef<string>;
    afterEnter: () => void;
    afterLeave: () => void;
    beforeLeave: () => void;
    handleClose: () => void;
    onModalClick: () => void;
    closed: import("vue").Ref<boolean>;
    dialogRef: any;
    style: import("vue").ComputedRef<import("vue").CSSProperties>;
    rendered: import("vue").Ref<boolean>;
    modalRef: import("vue").Ref<HTMLElement>;
    visible: import("vue").Ref<boolean>;
    zIndex: import("vue").Ref<number>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    direction?: unknown;
    size?: unknown;
    withHeader?: unknown;
    modalFade?: unknown;
    appendToBody?: unknown;
    beforeClose?: unknown;
    destroyOnClose?: unknown;
    center?: unknown;
    customClass?: unknown;
    closeOnClickModal?: unknown;
    closeOnPressEscape?: unknown;
    fullscreen?: unknown;
    lockScroll?: unknown;
    modal?: unknown;
    showClose?: unknown;
    title?: unknown;
    openDelay?: unknown;
    closeDelay?: unknown;
    top?: unknown;
    modelValue?: unknown;
    modalClass?: unknown;
    width?: unknown;
    zIndex?: unknown;
} & {
    top: string;
    width: string | number;
    title: string;
    center: boolean;
    size: string | number;
    appendToBody: boolean;
    direction: DrawerDirection;
    modelValue: boolean;
    showClose: boolean;
    destroyOnClose: boolean;
    customClass: string;
    closeOnClickModal: boolean;
    closeOnPressEscape: boolean;
    fullscreen: boolean;
    lockScroll: boolean;
    modal: boolean;
    openDelay: number;
    closeDelay: number;
    withHeader: boolean;
    modalFade: boolean;
} & {
    zIndex?: number;
    beforeClose?: (...args: any[]) => unknown;
    modalClass?: string;
}> & {}, {
    top: string;
    width: string | number;
    title: string;
    center: boolean;
    size: string | number;
    appendToBody: boolean;
    direction: DrawerDirection;
    modelValue: boolean;
    showClose: boolean;
    destroyOnClose: boolean;
    customClass: string;
    closeOnClickModal: boolean;
    closeOnPressEscape: boolean;
    fullscreen: boolean;
    lockScroll: boolean;
    modal: boolean;
    openDelay: number;
    closeDelay: number;
    withHeader: boolean;
    modalFade: boolean;
}>;
export default _default;
