import type { PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: (NumberConstructor | StringConstructor | BooleanConstructor)[];
        default: boolean;
    };
    value: {
        type: (NumberConstructor | StringConstructor | BooleanConstructor)[];
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    width: {
        type: NumberConstructor;
        default: number;
    };
    activeIconClass: {
        type: StringConstructor;
        default: string;
    };
    inactiveIconClass: {
        type: StringConstructor;
        default: string;
    };
    activeText: {
        type: StringConstructor;
        default: string;
    };
    inactiveText: {
        type: StringConstructor;
        default: string;
    };
    activeColor: {
        type: StringConstructor;
        default: string;
    };
    inactiveColor: {
        type: StringConstructor;
        default: string;
    };
    borderColor: {
        type: StringConstructor;
        default: string;
    };
    activeValue: {
        type: (NumberConstructor | StringConstructor | BooleanConstructor)[];
        default: boolean;
    };
    inactiveValue: {
        type: (NumberConstructor | StringConstructor | BooleanConstructor)[];
        default: boolean;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    validateEvent: {
        type: BooleanConstructor;
        default: boolean;
    };
    id: StringConstructor;
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    beforeChange: PropType<() => (Promise<boolean> | boolean)>;
}, {
    input: any;
    core: any;
    switchDisabled: import("vue").ComputedRef<boolean>;
    checked: import("vue").ComputedRef<boolean>;
    handleChange: () => void;
    switchValue: () => void;
    focus: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "input" | "update:modelValue")[], "change" | "input" | "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    value?: unknown;
    disabled?: unknown;
    width?: unknown;
    activeIconClass?: unknown;
    inactiveIconClass?: unknown;
    activeText?: unknown;
    inactiveText?: unknown;
    activeColor?: unknown;
    inactiveColor?: unknown;
    borderColor?: unknown;
    activeValue?: unknown;
    inactiveValue?: unknown;
    name?: unknown;
    validateEvent?: unknown;
    id?: unknown;
    loading?: unknown;
    beforeChange?: unknown;
} & {
    value: string | number | boolean;
    width: number;
    name: string;
    disabled: boolean;
    borderColor: string;
    loading: boolean;
    modelValue: string | number | boolean;
    validateEvent: boolean;
    activeIconClass: string;
    inactiveIconClass: string;
    activeText: string;
    inactiveText: string;
    activeColor: string;
    inactiveColor: string;
    activeValue: string | number | boolean;
    inactiveValue: string | number | boolean;
} & {
    id?: string;
    beforeChange?: () => (Promise<boolean> | boolean);
}> & {
    onChange?: (...args: any[]) => any;
    "onUpdate:modelValue"?: (...args: any[]) => any;
    onInput?: (...args: any[]) => any;
}, {
    value: string | number | boolean;
    width: number;
    name: string;
    disabled: boolean;
    borderColor: string;
    loading: boolean;
    modelValue: string | number | boolean;
    validateEvent: boolean;
    activeIconClass: string;
    inactiveIconClass: string;
    activeText: string;
    inactiveText: string;
    activeColor: string;
    inactiveColor: string;
    activeValue: string | number | boolean;
    inactiveValue: string | number | boolean;
}>;
export default _default;
