import Step from './src/item.vue';
import type { SFCWithInstall } from 'element-plus/es/utils/types';
declare const _Steps: SFCWithInstall<import("vue").DefineComponent<{
    space: {
        type: (NumberConstructor | StringConstructor)[];
        default: string;
    };
    active: {
        type: NumberConstructor;
        default: number;
    };
    direction: {
        type: StringConstructor;
        default: string;
        validator: (val: string) => boolean;
    };
    alignCenter: {
        type: BooleanConstructor;
        default: boolean;
    };
    simple: {
        type: BooleanConstructor;
        default: boolean;
    };
    finishStatus: {
        type: StringConstructor;
        default: string;
        validator: (val: string) => boolean;
    };
    processStatus: {
        type: StringConstructor;
        default: string;
        validator: (val: string) => boolean;
    };
}, {
    steps: import("vue").Ref<any[]>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "change"[], "change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    space?: unknown;
    active?: unknown;
    direction?: unknown;
    alignCenter?: unknown;
    simple?: unknown;
    finishStatus?: unknown;
    processStatus?: unknown;
} & {
    direction: string;
    space: string | number;
    active: number;
    alignCenter: boolean;
    simple: boolean;
    finishStatus: string;
    processStatus: string;
} & {}> & {
    onChange?: (...args: any[]) => any;
}, {
    direction: string;
    space: string | number;
    active: number;
    alignCenter: boolean;
    simple: boolean;
    finishStatus: string;
    processStatus: string;
}>> & {
    Step: typeof Step;
};
export default _Steps;
export declare const ElSteps: SFCWithInstall<import("vue").DefineComponent<{
    space: {
        type: (NumberConstructor | StringConstructor)[];
        default: string;
    };
    active: {
        type: NumberConstructor;
        default: number;
    };
    direction: {
        type: StringConstructor;
        default: string;
        validator: (val: string) => boolean;
    };
    alignCenter: {
        type: BooleanConstructor;
        default: boolean;
    };
    simple: {
        type: BooleanConstructor;
        default: boolean;
    };
    finishStatus: {
        type: StringConstructor;
        default: string;
        validator: (val: string) => boolean;
    };
    processStatus: {
        type: StringConstructor;
        default: string;
        validator: (val: string) => boolean;
    };
}, {
    steps: import("vue").Ref<any[]>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "change"[], "change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    space?: unknown;
    active?: unknown;
    direction?: unknown;
    alignCenter?: unknown;
    simple?: unknown;
    finishStatus?: unknown;
    processStatus?: unknown;
} & {
    direction: string;
    space: string | number;
    active: number;
    alignCenter: boolean;
    simple: boolean;
    finishStatus: string;
    processStatus: string;
} & {}> & {
    onChange?: (...args: any[]) => any;
}, {
    direction: string;
    space: string | number;
    active: number;
    alignCenter: boolean;
    simple: boolean;
    finishStatus: string;
    processStatus: string;
}>> & {
    Step: typeof Step;
};
export declare const ElStep: import("vue").DefineComponent<{
    title: {
        type: StringConstructor;
        default: string;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    description: {
        type: StringConstructor;
        default: string;
    };
    status: {
        type: StringConstructor;
        default: string;
        validator: (val: string) => boolean;
    };
}, {
    index: import("vue").Ref<number>;
    lineStyle: import("vue").Ref<{}>;
    currentStatus: import("vue").ComputedRef<string>;
    isCenter: import("vue").ComputedRef<boolean>;
    isVertical: import("vue").ComputedRef<boolean>;
    isSimple: import("vue").ComputedRef<boolean>;
    isLast: import("vue").ComputedRef<boolean>;
    space: import("vue").ComputedRef<string | number>;
    style: import("vue").ComputedRef<Record<string, unknown>>;
    parent: import("./src/item.vue").IStepsInject;
    setIndex: (val: any) => void;
    calcProgress: (status: any) => void;
    updateStatus: (activeIndex: any) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    title?: unknown;
    icon?: unknown;
    description?: unknown;
    status?: unknown;
} & {
    description: string;
    title: string;
    icon: string;
    status: string;
} & {}> & {}, {
    description: string;
    title: string;
    icon: string;
    status: string;
}>;
