import { Ref, ComputedRef } from 'vue';
import type { IMenuProps } from './menu.type';
declare const _default: import("vue").DefineComponent<{
    mode: {
        type: StringConstructor;
        default: string;
    };
    defaultActive: {
        type: StringConstructor;
        default: string;
    };
    defaultOpeneds: ArrayConstructor;
    uniqueOpened: BooleanConstructor;
    router: BooleanConstructor;
    menuTrigger: {
        type: StringConstructor;
        default: string;
    };
    collapse: BooleanConstructor;
    backgroundColor: {
        type: StringConstructor;
    };
    textColor: {
        type: StringConstructor;
    };
    activeTextColor: {
        type: StringConstructor;
    };
    collapseTransition: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    hoverBackground: ComputedRef<string>;
    isMenuPopup: ComputedRef<boolean>;
    menu: any;
    filteredSlot: Ref<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[]>;
    props: IMenuProps;
    open: (index: any) => void;
    close: (index: any) => void;
    handleResize: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("close" | "select" | "open")[], "close" | "select" | "open", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    mode?: unknown;
    defaultActive?: unknown;
    defaultOpeneds?: unknown;
    uniqueOpened?: unknown;
    router?: unknown;
    menuTrigger?: unknown;
    collapse?: unknown;
    backgroundColor?: unknown;
    textColor?: unknown;
    activeTextColor?: unknown;
    collapseTransition?: unknown;
} & {
    mode: string;
    collapse: boolean;
    defaultActive: string;
    uniqueOpened: boolean;
    router: boolean;
    menuTrigger: string;
    collapseTransition: boolean;
} & {
    backgroundColor?: string;
    textColor?: string;
    defaultOpeneds?: unknown[];
    activeTextColor?: string;
}> & {
    onClose?: (...args: any[]) => any;
    onSelect?: (...args: any[]) => any;
    onOpen?: (...args: any[]) => any;
}, {
    mode: string;
    collapse: boolean;
    defaultActive: string;
    uniqueOpened: boolean;
    router: boolean;
    menuTrigger: string;
    collapseTransition: boolean;
}>;
export default _default;
